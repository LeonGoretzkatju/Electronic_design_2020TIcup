import sensor, image, time
import cmath
#from fpioa_manager import fm
from machine import UART
from pyb import UART
#from board import board_info
#import lcd
uart = UART(3,115200)
#uart_A = UART(3, 115200,force=True)
sensor.reset()
sensor.set_pixformat(sensor.RGB565)
sensor.set_framesize(sensor.QQVGA)
sensor.skip_frames(time = 2000)
#sensor.set_auto_gain(False) # must be turned off for color tracking
#sensor.set_auto_whitebal(False) # must be turned off for color tracking
#lcd.init()
clock = time.clock()
xmid = 0
ymid = 0

def find_maxblob(blobs):
    max_size=0
    for blob in blobs:
        if blob.pixels() > max_size:
            max_blob=blob
            max_size = blob.pixels()
    return max_blob

def find_max(rects): #寻找面积最大的矩形块
    max_size = 0
    for b in rects:
        area = (b.rect())
        if b.magnitude() > max_size :
            max_blob = b
            max_size = b.magnitude()
    return max_blob

def find_maxcir(circles): #寻找面积最大的圆形
    max_size1 = 0
    for b in circles:
        if 3.1415926*b[2]*b[2] > max_size1:
            max_cir = b
            max_size1 = 3.1415926*b[2]*b[2]
    return max_cir

def data_convert(data):
    if data < 255:
        data1 = 0
        data2 = data
    if data > 255:
        data1 = 1
        data2 = data-255
    return data1,data2


while(True):
    clock.tick()
    xmid = 0
    ymid = 0
    xmidd = 0
    ymidd = 0
    img = sensor.snapshot() #去畸变
    print('image width',img.width())
    print('image height',img.height())
#    img = img.morph(kernel_size, kernel)
#    img = img.mean(2)
    rects = img.find_rects(threshold = 5000)
    circles = img.find_circles(threshold = 5000, x_margin = 10, y_margin = 10, r_margin = 10,r_min = 20, r_max = 80, r_step = 2)
#    uart_A = UART(UART.UART1, 115200, 8, None, 1, timeout=1000, read_buf_len=4096)
#    FH1 = bytearray([0xb3])
#    uart_A.write(FH1) #输出是帧头
#    uart_B = UART(UART.UART2, 115200, 8, None, 1, timeout=1000, read_buf_len=4096)
    green_threshold   = (0, 100, -40, -18, 0, 37)
    blue_threshold = (16, 63, -14, 16, -35, -10)
    red_threshold = (0, 100, 10, 127, 0, 57)
    blobs = img.find_blobs([blue_threshold])
    blobsgreen = img.find_blobs([green_threshold])
    blobsred = img.find_blobs([red_threshold])

    if blobs:
        max_blob=find_maxblob(blobs)
        print('sum :', len(blobs))
#        img.draw_rectangle(max_blob.rect())
#        img.draw_cross(max_blob.cx(), max_blob.cy())
        color = 'B'
        output_str="[%d,%d]" % (max_blob.cx(),max_blob.cy()) #方式1
        #output_str=json.dumps([max_blob.cx(),max_blob.cy()]) #方式2
        print('蓝色色块像素',max_blob.pixels())
        print('蓝色色块框面积',max_blob.area())
        if 0.43< max_blob.pixels()/max_blob.area()<0.57:
            print('这是三角形')
        print('you send:',output_str)
        uart.write(output_str+'\r\n')
        scolor = max_blob.pixels()
    #    area = 2*max_blob.rect()

    if blobsgreen:
        max_blobgreen=find_maxblob(blobsgreen)
        print('sum :', len(blobsgreen))
#        img.draw_rectangle(max_blobgreen.rect())
#        img.draw_cross(max_blobgreen.cx(), max_blobgreen.cy())
        color = 'G'
        output_str="[%d,%d]" % (max_blobgreen.cx(),max_blobgreen.cy()) #方式1
        #output_str=json.dumps([max_blob.cx(),max_blob.cy()]) #方式2
        print('绿色色块像素',max_blobgreen.pixels())
        print('绿色色块框面积',max_blobgreen.area())
        print('you send:',output_str)
        uart.write(output_str+'\r\n')
        scolor = max_blobgreen.pixels()
    #    area = 2*max_blob.rect()

    if blobsred:
        max_blobred=find_maxblob(blobsred)
        print('sum :', len(blobsred))
#        img.draw_rectangle(max_blobred.rect())
#        img.draw_cross(max_blobred.cx(), max_blobred.cy())
        color = 'R'
        output_str="[%d,%d]" % (max_blobred.cx(),max_blobred.cy()) #方式1
        #output_str=json.dumps([max_blob.cx(),max_blob.cy()]) #方式2
        print('红色色块像素',max_blobred.pixels())
        print('红色色块框面积',max_blobred.area())
        print('you send:',output_str)
        uart.write(output_str+'\r\n')
    #    area = 2*max_blob.rect()
        scolor = max_blobred.pixels()
    if circles:
        shape = 2
        d = find_maxcir(circles)
        area = (d.x()-d.r(), d.y()-d.r(), 2*d.r(), 2*d.r())
        radius = d.r()
        xmid = d.x()
        ymid = d.y()
        sshape = 3.1415926*d.r()*d.r()
        
        #area为识别到的圆的区域，即圆的外接矩形框
        '''
        statistics = img.get_statistics(roi=area)#像素颜色统计
        print(statistics)
            #(0,100,0,120,0,120)是红色的阈值，所以当区域内的众数（也就是最多的颜色），范围在这个阈值内，就说明是红色的圆。
            #l_mode()，a_mode()，b_mode()是L通道，A通道，B通道的众数。
            #(0, 50, 10, 127, -10, 30)
            #(0, 100, 25, 127, -8, 42) (0, 100, 10, 127, 0, 57)
        if 0<statistics.l_mode()<100 and 10<statistics.a_mode()<127 and 0<statistics.b_mode()<57:#if the circle is red
            color = 'R'
            radius = d.r()
            mianji = 3.1415926*d.r()*d.r()
            print('圆形的面积',mianji)
            if abs(mianji - max_blobred.pixels())<70:
                img.draw_circle(d.x(), d.y(), d.r(), color = (255, 0, 0))#识别到的红色圆形用红色的圆框出来
                img.draw_cross(d.x(),d.y())
            xmid = d.x()
#            [data1,data2] = data_convert(xmid)
#            datax1 = bytearray([data1,data2])
            ymid = d.y()
#            [data3,data4] = data_convert(ymid)
#            datax2 = bytearray([data3,data4])
#            uart.write(datax1)
#            uart.write(datax2)
        elif 78<statistics.l_mode()<96 and -16<statistics.a_mode()<0 and 5<statistics.b_mode()<23:
            img.draw_circle(d.x(), d.y(), d.r(), color = (0, 255, 0))
            img.draw_cross(d.x(),d.y())
            xmid = d.x()
#            [data1,data2] = data_convert(xmid)
#            datax1 = bytearray([data1,data2])
            ymid = d.y()
            color = 'G'
            radius = d.r()
#            [data3,data4] = data_convert(ymid)
#            datax2 = bytearray([data3,data4])
#            uart.write(datax1)
#            uart.write(datax2)
        elif 30<statistics.l_mode()<50 and 0<statistics.a_mode()<20 and -45<statistics.b_mode()<-20:
            img.draw_circle(d.x(), d.y(), d.r(), color = (0, 0, 255))
            img.draw_cross(d.x(),d.y())
            xmid = d.x()
            ymid = d.y()
            color = 'B'
            radius = d.r()
        else:
            img.draw_circle(d.x(), d.y(), d.r(), color = (255, 255, 255))
            #将非红色的圆用白色的矩形框出来
        '''



    if rects:
#    for c in img.find_rects(threshold = 3000):
#        area = (c.rect())
#        print('area',area)
#        print('坐标值',c.corners())
        #area为识别到的矩形区域
#        statistics = img.get_statistics(roi=area)#像素颜色统计
#        print(statistics)
        #(0,100,0,120,0,120)是红色的阈值，所以当区域内的众数（也就是最多的颜色），范围在这个阈值内，就说明是红色的圆。
        #l_mode()，a_mode()，b_mode()是L通道，A通道，B通道的众数。
        shape = 1
        c = find_max(rects)
        area = c.rect()
        sshape = area[2]*area[3]
        xmidd = area[0]+int(area[2]/2)
        ymidd = area[1]+int(area[3]/2)
        radius = area[2]

#        statistics = img.get_statistics(roi=area)#像素颜色统计
#        cr = c.find_rects(roi=area,threshold = 3500)
#        for ci in cr:
#            statistics = ci.get_statistics(roi = area)
        '''
        if 0<statistics.l_mode()<100 and 0<statistics.a_mode()<150 and 0<statistics.b_mode()<150:#if the circle is red
            juxingmianji = area[2]*area[3]
            xmidd = area[0]+int(area[2]/2)
            ymidd = area[1]+int(area[3]/2)
            color = 'R'
            radius = area[2]
            if abs(juxingmianji - max_blobred.area()) < 300:
                img.draw_rectangle(area, color = (255, 0, 0))
                img.draw_cross(area[0]+int(area[2]/2),area[1]+int(area[3]/2))
            print('矩形面积',juxingmianji)
#            FH1 = bytearray(0xb3)
#            uart_A.write(FH1) #输出是帧头
            #(78, 96, -16, -4, -14, 24)
        elif 0<statistics.l_mode()<100 and -40<statistics.a_mode()<-18 and 0<statistics.b_mode()<37:
            img.draw_rectangle(area, color = (0, 255, 0))
            img.draw_cross(area[0]+int(area[2]/2),area[1]+int(area[3]/2))
            xmidd = area[0]+int(area[2]/2)
            ymidd = area[1]+int(area[3]/2)
            color = 'G'
            radius = area[2]
        elif 16<statistics.l_mode()<63 and -14<statistics.a_mode()<16 and -35<statistics.b_mode()<-10:
            img.draw_rectangle(area, color = (0, 0, 255))
            img.draw_cross(area[0]+int(area[2]/2),area[1]+int(area[3]/2))
#            (0, 6, -17, 26, -25, -2)
            xmidd = area[0]+int(area[2]/2)
            ymidd = area[1]+int(area[3]/2)
            color = 'B'
            radius = area[2]
        else:
            print(1)
#            img.draw_rectangle(area, color = (255, 255, 255))
#            img.draw_circle(area[0]+int(area[2]/2),area[1]+int(area[3]/2),10,color = (0,255,0))

        '''
            #将非红色的圆用白色的矩形框出来
    '''
    if xmid < 255:
        data1 = 0
        data2 = xmid
    if xmid > 255:
        data1 = 1
        data2 = xmid-255
    if ymid < 255:
        data3 = 0
        data4 = ymid
    if ymid > 255:
        data3 = 1
        data4 = ymid-255
    '''
    '''
    datax1=bytearray([data1,data2])
    datax2=bytearray([data3,data4])
    '''



    if abs(sshape - scolor)<70:
        if color == 'R':
            img.draw_circle(d.x(), d.y(), d.r(), color = (255, 0, 0))#识别到的红色圆形用红色的圆框出来
            img.draw_cross(d.x(),d.y())
        if color == 'G':
            img.draw_circle(d.x(), d.y(), d.r(), color = (0, 255, 0))#识别到的红色圆形用红色的圆框出来
            img.draw_cross(d.x(),d.y())
        if color == 'B':
            img.draw_circle(d.x(), d.y(), d.r(), color = (0, 0, 255))#识别到的红色圆形用红色的圆框出来
            img.draw_cross(d.x(),d.y())
    if 0.43< max_blob.pixels()/max_blob.area()<0.57:
        print('这是三角形')
        shape = 3
        img.draw_rectangle(max_blob.rect())
        img.draw_cross(max_blob.cx(), max_blob.cy())
        xmiddd = max_blob.cx()
        ymiddd = max_blob.cy()
#        radius = int(cmath.sqrt(4/cmath.sqrt(3)*max_blob.pixels()))
    if 0.43< max_blobred.pixels()/max_blobred.area()<0.57:
        print('这是三角形')
        shape = 3
        img.draw_rectangle(max_blob.rect())
        img.draw_cross(max_blob.cx(), max_blob.cy())
        xmiddd = max_blobred.cx()
        ymiddd = max_blobred.cy()
#        radius = int(cmath.sqrt(4/cmath.sqrt(3)*max_blobred.pixels()))
    if 0.43< max_blobgreen.pixels()/max_blobgreen.area()<0.57:
        print('这是三角形')
        shape = 3
        img.draw_rectangle(max_blob.rect())
        img.draw_cross(max_blob.cx(), max_blob.cy())
        xmiddd = max_blobgreen.cx()
        ymiddd = max_blobgreen.cy()
#        radius = int(cmath.sqrt(4/cmath.sqrt(3)*max_blobgreen.pixels()))


    start = 0xb3
    end = 0xb4
    if shape == 1:

        [data1,data2] = data_convert(xmidd)
#        output_str1="[%c,%c]" % (data1,data2) #方式1
        [data3,data4] = data_convert(ymidd)
#        output_str2="[%c,%c]" % (data3,data4) #方式1
        uart.write('%c' %(start))
        uart.write('%c' %(shape))
        uart.write('%c' %(color))
        uart.write('%c' %(data1))
        uart.write('%c' %(data2))
        uart.write('%c' %(data3))
        uart.write('%c' %(data4))
        uart.write('%c' %(radius))
        print('边长为',radius)

    if shape == 2:
        [data1,data2] = data_convert(xmid)
    #        output_str1="[%c,%c]" % (data1,data2) #方式1
        [data3,data4] = data_convert(ymid)
    #        output_str2="[%c,%c]" % (data3,data4) #方式1
        uart.write('%c' %(start))
        uart.write('%c' %(shape))
        uart.write('%c' %(color))
        uart.write('%c' %(data1))
        uart.write('%c' %(data2))
        uart.write('%c' %(data3))
        uart.write('%c' %(data4))
        uart.write('%c' %(radius))
        print('边长为',radius)

    if shape == 3:
        [data1,data2] = data_convert(xmiddd)
        #        output_str1="[%c,%c]" % (data1,data2) #方式1
        [data3,data4] = data_convert(ymiddd)
        #        output_str2="[%c,%c]" % (data3,data4) #方式1
        uart.write('%c' %(start))
        uart.write('%c' %(shape))
        uart.write('%c' %(color))
        uart.write('%c' %(data1))
        uart.write('%c' %(data2))
        uart.write('%c' %(data3))
        uart.write('%c' %(data4))
#        uart.write('%c' %(radius))
#        print('边长为',radius)

    uart.write('%c' %(end))

print("FPS %f" % clock.fps())

